Train_Data = import('count_train.csv')
library(rio)
Train_Data = import('count_train.csv')
Train_Data
names(Train_Data)
modelo = glm(formula = yC ~ x3+x13+x14+x22+x25, data = Train_Data, family = poisson)
modelo
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x25, data = Train_Data, family = poisson)
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x25, data = Train_Data, family = poisson)
Test_Data = import('count_test.csv')
Test_Data
Xt = Test_Data[,c("x3","x13","x14","x22","x25")]
Xt
Y = Train_Data[,"yC"]
Y
Yt = Test_Data[,"yC"]
Yt
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x25, data = Train_Data, family = poisson)
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = Train_Data[,"yC"]
Yt = Test_Data[,"yC"]
X = Train_Data[,c("x3","x13","x14","x22","x25")]
Xt = Test_Data[,c("x3","x13","x14","x22","x25")]
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x25, data = Train_Data, family = poisson)
predict(poisson_reg, newdata = Xt, type = 'response')
Yt
X = apply(X, 2, function(x){(x-mean(x))/std(x)})
X = apply(X, 2, function(x){(x-mean(x))/sd(x)})
Y = Train_Data[,"yC"]
Yt = Test_Data[,"yC"]
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X = apply(X, 2, function(x){(x-mean(x))/sd(x)})
Xt = Test_Data[,c("x3","x13","x14","x22","x25")]
Xt = apply(Xt, 2, function(x){(x-mean(x))/sd(x)})
clear all
clc
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = Train_Data[,"yC"]
Yt = Test_Data[,"yC"]
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X = apply(X, 2, function(x){(x-mean(x))/sd(x)})
Xt = Test_Data[,c("x3","x13","x14","x22","x25")]
Xt = apply(Xt, 2, function(x){(x-mean(x))/sd(x)})
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x25, data = Train_Data, family = poisson)
predict(poisson_reg, newdata = Xt, type = 'response')
Yt
X
Xt
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = Train_Data[,"yC"]
Yt = Test_Data[,"yC"]
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X = apply(X, 2, function(x){(x-mean(x))/sd(x)})
Xt = Test_Data[,c("x3","x13","x14","x22","x25")]
Xt = apply(Xt, 2, function(x){(x-mean(x))/sd(x)})
Y
Yt
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = Train_Data[,"yC"]
Yt = Test_Data[,"yC"]
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X
X = apply(X, 2, function(x){(x-mean(x))/sd(x)})
X
X
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X
main(X)
mean(X)
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = Train_Data[,"yC"]
Yt = Test_Data[,"yC"]
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X = apply(X, 2, function(x){(x-mean(x))/sd(x)})
X
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X
mean(X$x3)
X$x3 - mean(X$x3)
(X$x3 - mean(X$x3))/sd(X$x3)
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X = apply(X, 2, function(x){(x-mean(x))/sd(x)})
X
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = Train_Data[,"yC"]
Yt = Test_Data[,"yC"]
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X = apply(X, 2, function(x){(x-mean(x))/sd(x)})
Xt = Test_Data[,c("x3","x13","x14","x22","x25")]
Xt = apply(Xt, 2, function(x){(x-mean(x))/sd(x)})
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x25, data = Train_Data, family = poisson)
predict(poisson_reg, newdata = Xt, type = 'response')
data.frame(apply(Xt, 2, function(x){(x-mean(x))/sd(x)}))
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = Train_Data[,"yC"]
Yt = Test_Data[,"yC"]
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X = data.frame(apply(X, 2, function(x){(x-mean(x))/sd(x)}))
Xt = Test_Data[,c("x3","x13","x14","x22","x25")]
Xt = data.frame(apply(Xt, 2, function(x){(x-mean(x))/sd(x)}))
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x25, data = Train_Data, family = poisson)
predict(poisson_reg, newdata = Xt, type = 'response')
Yt
Train_Data[,"yC"]
log(Train_Data[,"yC"])
Yt = (Test_Data[,"yC"] - mean(Test_Data[,"yC"]))/sd(Test_Data[,"yC"])
Yt
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = (Train_Data[,"yC"] - mean(Train_Data[,"yC"]))/sd(Train_Data[,"yC"])
Yt = (Test_Data[,"yC"] - mean(Test_Data[,"yC"]))/sd(Test_Data[,"yC"])
X = Train_Data[,c("x3","x13","x14","x22","x25")]
X = data.frame(apply(X, 2, function(x){(x-mean(x))/sd(x)}))
Xt = Test_Data[,c("x3","x13","x14","x22","x25")]
Xt = data.frame(apply(Xt, 2, function(x){(x-mean(x))/sd(x)}))
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x25, data = Train_Data, family = poisson)
predict(poisson_reg, newdata = Xt, type = 'response')
Yt
predict(poisson_reg, newdata = Xt)
Yt
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = (Train_Data[,"yC"] - mean(Train_Data[,"yC"]))/sd(Train_Data[,"yC"])
Yt = (Test_Data[,"yC"] - mean(Test_Data[,"yC"]))/sd(Test_Data[,"yC"])
X = Train_Data[,c("x3","x13","x14","x22","x24","x25")]
X = data.frame(apply(X, 2, function(x){(x-mean(x))/sd(x)}))
Xt = Test_Data[,c("x3","x13","x14","x22","x24","x25")]
Xt = data.frame(apply(Xt, 2, function(x){(x-mean(x))/sd(x)}))
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x24+x25, data = Train_Data, family = poisson)
predict(poisson_reg, newdata = Xt)
Yt
library(rio)
Train_Data = import('count_train.csv')
Test_Data = import('count_test.csv')
Y = Train_Data[,"yC"]
Yt = Test_Data[,"yC"]
X = Train_Data[,c("x3","x13","x14","x22","x24","x25")]
X = data.frame(apply(X, 2, function(x){(x-mean(x))/sd(x)}))
Xt = Test_Data[,c("x3","x13","x14","x22","x24","x25")]
Xt = data.frame(apply(Xt, 2, function(x){(x-mean(x))/sd(x)}))
poisson_reg = glm(formula = yC ~ x3+x13+x14+x22+x24+x25, data = Train_Data, family = poisson)
predict(poisson_reg, newdata = Xt)
